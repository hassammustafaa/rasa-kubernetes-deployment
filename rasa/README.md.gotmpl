{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

The Rasa Helm chart deploy a Rasa Open Source Server. Rasa is an open source machine learning framework for automated text and voice-based conversations.

See the [Rasa docs](https://rasa.com/docs/rasa/) to learn more.

## How to use Rasa Helm repository

You need to add this repository to your Helm repositories:

```shell
helm repo add rasa https://helm.rasa.com
helm repo update
```

{{ template "chart.homepageLine" . }}

{{ template "chart.requirementsSection" . }}

## Quick start

The default configuration of the Rasa chart deploys a Rasa Open Source Server, downloads a model, and serves the downloaded model.

Below you can find examples of how to configure your deployment or use more advanced configurations such as integration with Rasa X/Enterprise.

Default components that will be installed along with the Rasa server:

* PostgreSQL used as the backend for the [Tracker Store](https://rasa.com/docs/rasa/tracker-stores)


### Installing the Rasa Chart

To install the chart and assign the release name `<RELEASE_NAME>`, run the following command:

```bash
helm install --name <RELEASE_NAME> rasa/rasa
```

After Rasa was installed successfully you should see additional information on how to connect to it, e.g:

```shell
To access Rasa from outside of the cluster, follow the steps below:

1. Get the Rasa URL by running these commands:

    export SERVICE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].port}" services <RELEASE_NAME>)
    kubectl port-forward --namespace default svc/<RELEASE_NAME> ${SERVICE_PORT}:${SERVICE_PORT} &
    echo "http://127.0.0.1:${SERVICE_PORT}"


    NGINX is enabled, in order to send a request that goes through NGINX you can use port: 80
```

After executing the commands above, you can validate that it is accessible from outside the cluster by sending a curl request:

```shell
curl http://127.0.0.1:${SERVICE_PORT}
Hello from Rasa: 2.4.0
```

## Configuration

To configure the chart, use a YAML file that specifies the values for the chart parameters. In this README we'll call this file `rasa-values.yaml`. To create and use your `rasa-values.yaml` file:

1. Copy the default [values.yaml](values.yaml) value file to a new `rasa-values.yaml` file.
2. Set any custom parameters in `rasa-values.yaml`.
3. To apply your changes, upgrade the Rasa Helm chart with the new rasa-values.yaml file:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa
```

Use the same upgrade command above to apply any subsequent changes you make to your values.


### Exposing the rasa deployment to the public

By default the rasa service is available only within the Kubernetes cluster.
In order to make it accessible outside the cluster via a load balancer, update your `rasa-values.yaml` file with the following configuration:

```yaml
service:
    type: LoadBalancer
```

### Enabling TLS for NGINX (self-signed)

To use a self-signed TLS certificate for NGINX, update your `rasa-values.yaml` with the following NGINX TLS self-signed configuration:

```yaml
nginx:
  tls:
    enabled: true
    generateSelfSignedCert: true
```

### Note on Configuring Endpoints and Channel Credentials

To configure [endpoints](https://rasa.com/docs/rasa/arch-overview) and [channel credentials](https://rasa.com/docs/rasa/connectors/your-own-website) you can either specify them directly in rasa-values.yaml under `applicationSettings.endpoints` and `applicationSettings.credentials`, or you can [use Rasa X/Enterprise as a configuration endpoint](../../examples/rasa/README.md) if it is deployed in the same namespace as Rasa.

> It is not possible to combine the two options. If you choose to use Rasa X/Enterprise as a configuration endpoint, all other configuration of endpoints and credentials will be ignored.

### Options for loading models

To load a model for Rasa to serve, you can use a model server to pull models at regular intervals. If you're not using a model server, you'll need to configure [Loading an Initial Model](#loading-an-initial-model).

You can use Rasa X/Enterprise as a model server or use your own model server. To configure your own model server, follow the instructions on the [Rasa docs](https://rasa.com/docs/rasa/model-storage#load-model-from-server).

To enable a non-Rasa X model server, add this configuration information to your values:

```yaml
applicationSettings:
  # (...)
  endpoints:
    models:
      enabled: true
      url: http://my-server.com/models/default
      token: "auth-token"
      waitTimeBetweenPulls: 20
```

To use Rasa X/Enterprise as a model server, you don't need to specify the URL, since it is defined in the [section which configures the use of Rasa X/Enterprise](#connecting-rasa-with-rasa-xenterprise), so you can add this configuration to your values:

```yaml
applicationSettings:
  # (...)
  endpoints:
    models:
      enabled: true
      # User Rasa X/Enterprise token
      # If you use the rasa-x-helm chart you can set a token by using the `rasax.token` parameter
      # See: https://github.com/RasaHQ/rasa-x-helm/blob/main/charts/rasa-x/values.yaml#L22
      token: "rasaXToken"
      waitTimeBetweenPulls: 20
      useRasaXasModelServer:
        enabled: true
        # -- The tag of the model that should be pulled from Rasa X/Enterprise
        tag: "production"
```


#### Loading an initial model

The first time you install Rasa, you may not have a model server available yet, or you may want an lightweight model for testing the deployment. For this purpose, you can choose between training or downloading an initial model. By default, the Rasa chart downloads an example model from GitHub. To use this option, you don't have to change anything.

If you want to define an existing model to download from a URL you define instead, update your `rasa-values.yaml` with the URL according to the following configuration:

```yaml
applicationSettings:
  initialModel: "https://github.com/RasaHQ/rasa-x-demo/blob/master/models/model.tar.gz?raw=true"
```

Note that the URL for the initial model download has to point to a tar.gz file and must not require authentication.

If you want to train an initial model you can do this by setting the `applicationSettings.trainInitialModel` to `true`. It creates a init container that trains a model based on data located in the `/app` directory. If the `/app` directory is empty it creates a new project.
[Here](../../examples/rasa/train-model-helmfile.yaml) you can find an example that shows how to download data files from a git repository and train an initial model.

Visit [the docs](https://rasa.com/docs/rasa/setting-up-ci-cd) to learn more about how to train a model.

### Configuring Messaging Channels

You can enable messaging channels by specifying credentials in `rasa-values.yaml` in the same way you would define them in `credentials.yml` when running locally.

For example, to enable the REST channel, update your `rasa-values.yaml` file with the following channel configuration:

```yaml
applicationSettings:
  # (...)
  credentials:
    # (...)
    additionalChannelCredentials:
      rest:
```
(For the `rest` channel, no credentials are required. To learn more see: https://rasa.com/docs/rasa/connectors/your-own-website)

### Connecting Rasa with Rasa X/Enterprise

Any Rasa Open Source server can stream events to Rasa X/Enterprise using an [event broker](https://rasa.com/docs/rasa/event-brokers). Both Rasa and Rasa X/Enterprise will need to refer to the same event broker.

This means you have three options:

1. Configure Rasa to refer to the event broker started by Rasa X/Enterprise
2. Configure Rasa X/Enterprise to connect to the event broker started by Rasa
3. Configure both Rasa and Rasa X/Enterprise to connect to an external event broker (e.g. a managed Kafka instance)

For example, to configure Rasa to refer to the event broker started by Rasa X/Enterprise:

```yaml
applicationSettings:
  rasaX:
    enabled: true
    # here you have to put the URL to your Rasa Enterprise instance
    url: "http://example.com"
  endpoints:
    # In order to send messages to the same
    # event broker as Rasa X/Enterprise does we can pass
    # a custom configuration.
    eventBroker:
      type: "pika"
      url: "<exposed-rabbit-service-address>"
      username: "user"
      password: ${RABBITMQ_PASSWORD}
      port: 5672
      queues:
        - "rasa_production_events"
extraEnv:
  # The configuration for an event broker uses environment variables, thus
  # you have to pass extra environment variables that read values from
  # the rasa-x-rabbit secret.
  - name: "RABBITMQ_PASSWORD"
    valueFrom:
      secretKeyRef:
        name: rasa-x-rabbit
        key: rabbitmq-password
```

In the example above we assumed that the `rasa-x-rabbit` secret already exists in the cluster and contains the `rabbitmq-password` key.

If you're using the rasa-x-helm chart to deploy Rasa X/Enterprise you might have to update your values.yaml file, please visit [the docs](https://github.com/RasaHQ/rasa-x-helm/tree/rasa-x-2.0.0#enabling-an-external-rasa-oss-deployment) to learn more.

## Examples of usage

In the [`examples/rasa`](../../examples) directory you can find more detailed examples of configuration:

- [How to download a model via URL using a init container and load it into Rasa OSS](../../examples/rasa/download-model-helmfile.yaml)
- [How to use Rasa X/Enterprise deployed in the same namespace as a configuration endpoint](../../examples/rasa/README.md)
- [How to run the rasa chart on OpenShift](../../examples/rasa/openshift-helmfile.yaml)

{{ template "chart.valuesSection" . }}
